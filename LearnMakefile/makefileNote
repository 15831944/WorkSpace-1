



一个工程中生成多个可执行文件：
all : prog1 prog2 prog3
.PHONY : all
prog1 : prog1.o utils.o
cc -o prog1 prog1.o utils.o
prog2 : prog2.o
cc -o prog2 prog2.o
prog3 : prog3.o sort.o utils.o
cc -o prog3 prog3.o sort.o utils.o
.PHONY: cleanall cleanobj cleandiff
cleanall : cleanobj cleandiff
rm program
cleanobj :
rm *.o
cleandiff :
rm *.diff




风格3：
objects = main.o kbd.o command.o display.o \
insert.o search.o files.o utils.o
edit : $(objects)
cc -o edit $(objects)
$(objects) : defs.h
kbd.o command.o files.o : command.h
display.o insert.o search.o files.o : buffer.h

风格2：
objects = main.o kbd.o command.o display.o \
insert.o search.o files.o utils.o
edit : $(objects)
cc -o edit $(objects)
main.o : defs.h
kbd.o : defs.h command.h
command.o : defs.h command.h
display.o : defs.h buffer.h
insert.o : defs.h buffer.h
search.o : defs.h buffer.h
files.o : defs.h buffer.h command.h
utils.o : defs.h
.PHONY : clean
clean :
rm edit $(objects)


风格1：
objects = main.o kbd.o command.o display.o \
insert.o search.o files.o utils.o
edit : $(objects)
cc -o edit $(objects)
main.o : main.c defs.h
cc -c main.c
kbd.o : kbd.c defs.h command.h
cc -c kbd.c
command.o : command.c defs.h command.h
cc -c command.c
display.o : display.c defs.h buffer.h
cc -c display.c
insert.o : insert.c defs.h buffer.h
cc -c insert.c
search.o : search.c defs.h buffer.h
cc -c search.c
files.o : files.c defs.h buffer.h command.h
cc -c files.c
utils.o : utils.c defs.h
cc -c utils.c
clean :
rm edit $(objects)


targets : prerequisites ; command
command
...
targets 是文件名,以空格分开,可以使用通配符。
一般来说,我们的目标基本上是一个
文件,但也有可能是多个文件。
command 是命令行,如果其不与“target
rerequisites”在一行,那么,必须以[Tab 键]
开头,如果和 prerequisites 在一行,那么可以用分号做为分隔。(见上)

波浪号(“~”)字符在文件名中也有比较特殊的用途。如果是“~/test”,这就表示当前
用户的$HOME 目录下的 test 目录
 cd ~ //

“%”的意思是匹配零或若干字符,例
如 , “ %.h” 表 示 所 有 以 “ .h” 结 尾 的 文 件 。

bigoutput littleoutput : text.g
generate text.g -$(subst output,,$@) > $@

上述规则等价于:
bigoutput : text.g
generate text.g -big > bigoutput
littleoutput : text.g
generate text.g -little > littleoutput

一个自动化变量“$@”(关于自动化变量,将在后面讲述),这个变量表示
着目前规则中所有的目标的集合
$”表示执行一个 Makefile 的函数,函数名为 subst,后
面的为参数，截取字符串



gcc -c a.c  编译成目标文件a.o
gcc -o a a.o  生成执行文件a.exe

